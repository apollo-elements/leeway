diff --git a/node_modules/rollup-plugin-graphql/dist/rollup-plugin-graphql.cjs.js b/node_modules/rollup-plugin-graphql/dist/rollup-plugin-graphql.cjs.js
index 0cbc96e..b258f2e 100644
--- a/node_modules/rollup-plugin-graphql/dist/rollup-plugin-graphql.cjs.js
+++ b/node_modules/rollup-plugin-graphql/dist/rollup-plugin-graphql.cjs.js
@@ -6,16 +6,18 @@ var rollupPluginutils = require('rollup-pluginutils');
 var loader = _interopDefault(require('graphql-tag/loader'));
 var os = require('os');
 
-var toESModules = function (source) {
+function toESModules(source) {
   if (typeof source !== "string") {
     return source;
   }
 
   return replaceRequires(replaceModuleExports(source));
-};
+}
 
 function replaceModuleExports(source) {
-  return source.replace('module.exports = doc', 'export default doc');
+  return source
+    .replace('module.exports = doc', 'export default doc')
+    .replace(/module\.exports\["(.*)"] = oneQuery\(doc, "(.*)"\)/, function (match, g1, g2) { return ("export const " + g1 + " = oneQuery(doc, \"" + g2 + "\")"); });
 }
 
 function replaceRequires(source) {
@@ -24,7 +26,7 @@ function replaceRequires(source) {
 
   // replace a require statement with a variable
   source = source.replace(/require\(([^)]+)\)/ig, function (match, path) {
-    path = path.replace(/[\"\']+/g, '');
+    path = path.replace(/["']+/g, '');
 
     if (!imports[path]) {
       imports[path] = "frgmt" + (++index);
@@ -41,27 +43,32 @@ function replaceRequires(source) {
   return importsOutput + os.EOL + source;
 }
 
-function graphql (options) {
-	if ( options === void 0 ) options = {};
-
-	// path filter
-	var filter = rollupPluginutils.createFilter(options.include, options.exclude);
-	// only .graphql and .gql files
-	var filterExt = /\.(graphql|gql)$/i;
-
-	return {
-		name: 'graphql',
-		transform: function transform (source, id) {
-			if (!filter(id)) { return null; }
-			if (!filterExt.test(id)) { return null; }
-
-			// XXX: this.cachable() in graphql-tag/loader
-			var code = toESModules(loader.call({cacheable: function cacheable () {}}, source));
-
-			return { code: code };
-		}
-	};
+function graphql(ref) {
+  if ( ref === void 0 ) ref = {};
+  var include = ref.include;
+  var exclude = ref.exclude;
+
+  // path filter
+  var filter = rollupPluginutils.createFilter(include, exclude);
+  // only .graphql and .gql files
+  var filterExt = /\.(graphql|gql)$/i;
+
+  return {
+    name: 'graphql',
+    transform: function transform(source, id) {
+      if (!filter(id)) { return null; }
+      if (!filterExt.test(id)) { return null; }
+
+      // XXX: this.cachable() in graphql-tag/loader
+      var code = toESModules(loader.call({
+        cacheable: function cacheable() { }
+      }, source));
+
+      return {
+        code: code
+      };
+    }
+  };
 }
 
 module.exports = graphql;
-//# sourceMappingURL=rollup-plugin-graphql.cjs.js.map
diff --git a/node_modules/rollup-plugin-graphql/dist/rollup-plugin-graphql.cjs.js.map b/node_modules/rollup-plugin-graphql/dist/rollup-plugin-graphql.cjs.js.map
deleted file mode 100644
index daef5ff..0000000
--- a/node_modules/rollup-plugin-graphql/dist/rollup-plugin-graphql.cjs.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"rollup-plugin-graphql.cjs.js","sources":["../src/toESModules.js","../src/index.js"],"sourcesContent":["import { EOL } from 'os';\n\nexport default function (source) {\n  if (typeof source !== \"string\") {\n    return source;\n  }\n\n  return replaceRequires(replaceModuleExports(source));\n}\n\nfunction replaceModuleExports(source) {\n  return source.replace('module.exports = doc', 'export default doc');\n}\n\nfunction replaceRequires(source) {\n  const imports = {};\n  let index = 0;\n  \n  // replace a require statement with a variable\n  source = source.replace(/require\\(([^)]+)\\)/ig, (match, path) => {\n    path = path.replace(/[\\\"\\']+/g, '');\n    \n    if (!imports[path]) {\n      imports[path] = `frgmt${++index}`;\n    }\n    \n    return imports[path];\n  });\n\n  // prepare import statements\n  const importsOutput = Object.keys(imports)\n    .map((path) => `import ${imports[path]} from \"${path}\";`)\n    .join(EOL);\n\n  return importsOutput + EOL + source;\n}\n","import { createFilter } from 'rollup-pluginutils';\nimport loader from 'graphql-tag/loader';\n\nimport toESModules from './toESModules';\n\nexport default function graphql (options = {}) {\n\t// path filter\n\tconst filter = createFilter(options.include, options.exclude);\n\t// only .graphql and .gql files\n\tconst filterExt = /\\.(graphql|gql)$/i;\n\n\treturn {\n\t\tname: 'graphql',\n\t\ttransform (source, id) {\n\t\t\tif (!filter(id)) return null;\n\t\t\tif (!filterExt.test(id)) return null;\n\n\t\t\t// XXX: this.cachable() in graphql-tag/loader\n\t\t\tconst code = toESModules(loader.call({cacheable () {}}, source));\n\n\t\t\treturn { code };\n\t\t}\n\t};\n}\n"],"names":["const","let","EOL","createFilter"],"mappings":";;;;;;;;AAEA,kBAAe,UAAU,MAAM,EAAE;EAC/B,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAO,MAAM,CAAC;GACf;;EAED,OAAO,eAAe,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC;CACtD,CAAA;;AAED,SAAS,oBAAoB,CAAC,MAAM,EAAE;EACpC,OAAO,MAAM,CAAC,OAAO,CAAC,sBAAsB,EAAE,oBAAoB,CAAC,CAAC;CACrE;;AAED,SAAS,eAAe,CAAC,MAAM,EAAE;EAC/BA,IAAM,OAAO,GAAG,EAAE,CAAC;EACnBC,IAAI,KAAK,GAAG,CAAC,CAAC;;;EAGd,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,sBAAsB,EAAE,UAAC,KAAK,EAAE,IAAI,EAAE;IAC5D,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;;IAEpC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;MAClB,OAAO,CAAC,IAAI,CAAC,GAAG,OAAM,IAAE,EAAE,KAAK,CAAA,CAAG;KACnC;;IAED,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;GACtB,CAAC,CAAC;;;EAGHD,IAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;KACvC,GAAG,CAAC,UAAC,IAAI,EAAE,UAAG,SAAQ,IAAE,OAAO,CAAC,IAAI,CAAC,CAAA,aAAQ,GAAE,IAAI,QAAG,IAAC,CAAC;KACxD,IAAI,CAACE,MAAG,CAAC,CAAC;;EAEb,OAAO,aAAa,GAAGA,MAAG,GAAG,MAAM,CAAC;CACrC;;AC9Bc,SAAS,OAAO,EAAE,OAAY,EAAE;kCAAP,GAAG,EAAE;;;CAE5CF,IAAM,MAAM,GAAGG,8BAAY,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;;CAE9DH,IAAM,SAAS,GAAG,mBAAmB,CAAC;;CAEtC,OAAO;EACN,IAAI,EAAE,SAAS;EACf,SAAS,oBAAA,EAAE,MAAM,EAAE,EAAE,EAAE;GACtB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,EAAA,OAAO,IAAI,CAAC,EAAA;GAC7B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAA,OAAO,IAAI,CAAC,EAAA;;;GAGrCA,IAAM,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,oBAAA,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;;GAEjE,OAAO,EAAE,MAAA,IAAI,EAAE,CAAC;GAChB;EACD,CAAC;CACF;;"}
\ No newline at end of file
diff --git a/node_modules/rollup-plugin-graphql/dist/rollup-plugin-graphql.es.js b/node_modules/rollup-plugin-graphql/dist/rollup-plugin-graphql.es.js
index 94be942..bafc0aa 100644
--- a/node_modules/rollup-plugin-graphql/dist/rollup-plugin-graphql.es.js
+++ b/node_modules/rollup-plugin-graphql/dist/rollup-plugin-graphql.es.js
@@ -2,16 +2,18 @@ import { createFilter } from 'rollup-pluginutils';
 import loader from 'graphql-tag/loader';
 import { EOL } from 'os';
 
-var toESModules = function (source) {
+function toESModules(source) {
   if (typeof source !== "string") {
     return source;
   }
 
   return replaceRequires(replaceModuleExports(source));
-};
+}
 
 function replaceModuleExports(source) {
-  return source.replace('module.exports = doc', 'export default doc');
+  return source
+    .replace('module.exports = doc', 'export default doc')
+    .replace(/module\.exports\["(.*)"] = oneQuery\(doc, "(.*)"\)/, function (match, g1, g2) { return ("export const " + g1 + " = oneQuery(doc, \"" + g2 + "\")"); });
 }
 
 function replaceRequires(source) {
@@ -20,7 +22,7 @@ function replaceRequires(source) {
 
   // replace a require statement with a variable
   source = source.replace(/require\(([^)]+)\)/ig, function (match, path) {
-    path = path.replace(/[\"\']+/g, '');
+    path = path.replace(/["']+/g, '');
 
     if (!imports[path]) {
       imports[path] = "frgmt" + (++index);
@@ -37,27 +39,35 @@ function replaceRequires(source) {
   return importsOutput + EOL + source;
 }
 
-function graphql (options) {
-	if ( options === void 0 ) options = {};
+function graphql(ref) {
+  if ( ref === void 0 ) ref = {};
+  var include = ref.include;
+  var exclude = ref.exclude;
+
+  // path filter
+  var filter = createFilter(include, exclude);
+  // only .graphql and .gql files
+  var filterExt = /\.(graphql|gql)$/i;
 
-	// path filter
-	var filter = createFilter(options.include, options.exclude);
-	// only .graphql and .gql files
-	var filterExt = /\.(graphql|gql)$/i;
+  return {
+    name: 'graphql',
+    transform: function transform(source, id) {
+      if (!filter(id)) { return null; }
+      if (!filterExt.test(id)) { return null; }
 
-	return {
-		name: 'graphql',
-		transform: function transform (source, id) {
-			if (!filter(id)) { return null; }
-			if (!filterExt.test(id)) { return null; }
+      // XXX: this.cachable() in graphql-tag/loader
+      var code = toESModules(loader.call({
+        cacheable: function cacheable() { }
+      }, source));
 
-			// XXX: this.cachable() in graphql-tag/loader
-			var code = toESModules(loader.call({cacheable: function cacheable () {}}, source));
+      const map = { mappings: '' };
 
-			return { code: code };
-		}
-	};
+      return {
+        code: code
+        map: map
+      };
+    }
+  };
 }
 
 export default graphql;
-//# sourceMappingURL=rollup-plugin-graphql.es.js.map
diff --git a/node_modules/rollup-plugin-graphql/dist/rollup-plugin-graphql.es.js.map b/node_modules/rollup-plugin-graphql/dist/rollup-plugin-graphql.es.js.map
deleted file mode 100644
index 73141c2..0000000
--- a/node_modules/rollup-plugin-graphql/dist/rollup-plugin-graphql.es.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"rollup-plugin-graphql.es.js","sources":["../src/toESModules.js","../src/index.js"],"sourcesContent":["import { EOL } from 'os';\n\nexport default function (source) {\n  if (typeof source !== \"string\") {\n    return source;\n  }\n\n  return replaceRequires(replaceModuleExports(source));\n}\n\nfunction replaceModuleExports(source) {\n  return source.replace('module.exports = doc', 'export default doc');\n}\n\nfunction replaceRequires(source) {\n  const imports = {};\n  let index = 0;\n  \n  // replace a require statement with a variable\n  source = source.replace(/require\\(([^)]+)\\)/ig, (match, path) => {\n    path = path.replace(/[\\\"\\']+/g, '');\n    \n    if (!imports[path]) {\n      imports[path] = `frgmt${++index}`;\n    }\n    \n    return imports[path];\n  });\n\n  // prepare import statements\n  const importsOutput = Object.keys(imports)\n    .map((path) => `import ${imports[path]} from \"${path}\";`)\n    .join(EOL);\n\n  return importsOutput + EOL + source;\n}\n","import { createFilter } from 'rollup-pluginutils';\nimport loader from 'graphql-tag/loader';\n\nimport toESModules from './toESModules';\n\nexport default function graphql (options = {}) {\n\t// path filter\n\tconst filter = createFilter(options.include, options.exclude);\n\t// only .graphql and .gql files\n\tconst filterExt = /\\.(graphql|gql)$/i;\n\n\treturn {\n\t\tname: 'graphql',\n\t\ttransform (source, id) {\n\t\t\tif (!filter(id)) return null;\n\t\t\tif (!filterExt.test(id)) return null;\n\n\t\t\t// XXX: this.cachable() in graphql-tag/loader\n\t\t\tconst code = toESModules(loader.call({cacheable () {}}, source));\n\n\t\t\treturn { code };\n\t\t}\n\t};\n}\n"],"names":["const","let"],"mappings":";;;;AAEA,kBAAe,UAAU,MAAM,EAAE;EAC/B,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAO,MAAM,CAAC;GACf;;EAED,OAAO,eAAe,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC;CACtD,CAAA;;AAED,SAAS,oBAAoB,CAAC,MAAM,EAAE;EACpC,OAAO,MAAM,CAAC,OAAO,CAAC,sBAAsB,EAAE,oBAAoB,CAAC,CAAC;CACrE;;AAED,SAAS,eAAe,CAAC,MAAM,EAAE;EAC/BA,IAAM,OAAO,GAAG,EAAE,CAAC;EACnBC,IAAI,KAAK,GAAG,CAAC,CAAC;;;EAGd,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,sBAAsB,EAAE,UAAC,KAAK,EAAE,IAAI,EAAE;IAC5D,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;;IAEpC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;MAClB,OAAO,CAAC,IAAI,CAAC,GAAG,OAAM,IAAE,EAAE,KAAK,CAAA,CAAG;KACnC;;IAED,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;GACtB,CAAC,CAAC;;;EAGHD,IAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;KACvC,GAAG,CAAC,UAAC,IAAI,EAAE,UAAG,SAAQ,IAAE,OAAO,CAAC,IAAI,CAAC,CAAA,aAAQ,GAAE,IAAI,QAAG,IAAC,CAAC;KACxD,IAAI,CAAC,GAAG,CAAC,CAAC;;EAEb,OAAO,aAAa,GAAG,GAAG,GAAG,MAAM,CAAC;CACrC;;AC9Bc,SAAS,OAAO,EAAE,OAAY,EAAE;kCAAP,GAAG,EAAE;;;CAE5CA,IAAM,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;;CAE9DA,IAAM,SAAS,GAAG,mBAAmB,CAAC;;CAEtC,OAAO;EACN,IAAI,EAAE,SAAS;EACf,SAAS,oBAAA,EAAE,MAAM,EAAE,EAAE,EAAE;GACtB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,EAAA,OAAO,IAAI,CAAC,EAAA;GAC7B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAA,OAAO,IAAI,CAAC,EAAA;;;GAGrCA,IAAM,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,oBAAA,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;;GAEjE,OAAO,EAAE,MAAA,IAAI,EAAE,CAAC;GAChB;EACD,CAAC;CACF;;"}
\ No newline at end of file
diff --git a/node_modules/rollup-plugin-graphql/rollup.config.js b/node_modules/rollup-plugin-graphql/rollup.config.js
new file mode 100644
index 0000000..fde6236
--- /dev/null
+++ b/node_modules/rollup-plugin-graphql/rollup.config.js
@@ -0,0 +1,16 @@
+import buble from 'rollup-plugin-buble';
+
+const pkg = require('./package.json');
+
+const external = Object.keys(pkg.dependencies);
+
+export default {
+	input: 'src/index.js',
+	output: [
+		{ file: pkg.main, format: 'cjs' },
+		{ file: pkg.module, format: 'es' }
+	],
+	plugins: [ buble() ],
+	external,
+	sourceMap: true
+};
diff --git a/node_modules/rollup-plugin-graphql/src/index.js b/node_modules/rollup-plugin-graphql/src/index.js
index 151500f..69b698f 100644
--- a/node_modules/rollup-plugin-graphql/src/index.js
+++ b/node_modules/rollup-plugin-graphql/src/index.js
@@ -3,22 +3,26 @@ import loader from 'graphql-tag/loader';
 
 import toESModules from './toESModules';
 
-export default function graphql (options = {}) {
-	// path filter
-	const filter = createFilter(options.include, options.exclude);
-	// only .graphql and .gql files
-	const filterExt = /\.(graphql|gql)$/i;
+export default function graphql({ include, exclude } = {}) {
+  // path filter
+  const filter = createFilter(include, exclude);
+  // only .graphql and .gql files
+  const filterExt = /\.(graphql|gql)$/i;
 
-	return {
-		name: 'graphql',
-		transform (source, id) {
-			if (!filter(id)) return null;
-			if (!filterExt.test(id)) return null;
+  return {
+    name: 'graphql',
+    transform(source, id) {
+      if (!filter(id)) return null;
+      if (!filterExt.test(id)) return null;
 
-			// XXX: this.cachable() in graphql-tag/loader
-			const code = toESModules(loader.call({cacheable () {}}, source));
+      // XXX: this.cachable() in graphql-tag/loader
+      const code = toESModules(loader.call({
+        cacheable() { }
+      }, source));
 
-			return { code };
-		}
-	};
+      return {
+        code
+      };
+    }
+  };
 }
diff --git a/node_modules/rollup-plugin-graphql/src/toESModules.js b/node_modules/rollup-plugin-graphql/src/toESModules.js
index f70ff58..1dafe03 100644
--- a/node_modules/rollup-plugin-graphql/src/toESModules.js
+++ b/node_modules/rollup-plugin-graphql/src/toESModules.js
@@ -1,6 +1,8 @@
-import { EOL } from 'os';
+import {
+  EOL
+} from 'os';
 
-export default function (source) {
+export default function(source) {
   if (typeof source !== "string") {
     return source;
   }
@@ -9,7 +11,9 @@ export default function (source) {
 }
 
 function replaceModuleExports(source) {
-  return source.replace('module.exports = doc', 'export default doc');
+  return source
+    .replace('module.exports = doc', 'export default doc')
+    .replace(/module\.exports\["(.*)"] = oneQuery\(doc, "(.*)"\)/, (match, g1, g2) => `export const ${g1} = oneQuery(doc, "${g2}")`);
 }
 
 function replaceRequires(source) {
@@ -18,7 +22,7 @@ function replaceRequires(source) {
 
   // replace a require statement with a variable
   source = source.replace(/require\(([^)]+)\)/ig, (match, path) => {
-    path = path.replace(/[\"\']+/g, '');
+    path = path.replace(/["']+/g, '');
 
     if (!imports[path]) {
       imports[path] = `frgmt${++index}`;
