patch-package
new file mode 100644
--- /dev/null
+++ b/node_modules/rollup-plugin-graphql/dist/rollup-plugin-graphql.cjs.js
@@ -0,0 +1,74 @@
+'use strict';
+
+function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
+
+var rollupPluginutils = require('rollup-pluginutils');
+var loader = _interopDefault(require('graphql-tag/loader'));
+var os = require('os');
+
+function toESModules(source) {
+  if (typeof source !== "string") {
+    return source;
+  }
+
+  return replaceRequires(replaceModuleExports(source));
+}
+
+function replaceModuleExports(source) {
+  return source
+    .replace('module.exports = doc', 'export default doc')
+    .replace(/module\.exports\["(.*)"] = oneQuery\(doc, "(.*)"\)/, function (match, g1, g2) { return ("export const " + g1 + " = oneQuery(doc, \"" + g2 + "\")"); });
+}
+
+function replaceRequires(source) {
+  var imports = {};
+  var index = 0;
+
+  // replace a require statement with a variable
+  source = source.replace(/require\(([^)]+)\)/ig, function (match, path) {
+    path = path.replace(/["']+/g, '');
+
+    if (!imports[path]) {
+      imports[path] = "frgmt" + (++index);
+    }
+
+    return imports[path];
+  });
+
+  // prepare import statements
+  var importsOutput = Object.keys(imports)
+    .map(function (path) { return ("import " + (imports[path]) + " from \"" + path + "\";"); })
+    .join(os.EOL);
+
+  return importsOutput + os.EOL + source;
+}
+
+function graphql(ref) {
+  if ( ref === void 0 ) ref = {};
+  var include = ref.include;
+  var exclude = ref.exclude;
+
+  // path filter
+  var filter = rollupPluginutils.createFilter(include, exclude);
+  // only .graphql and .gql files
+  var filterExt = /\.(graphql|gql)$/i;
+
+  return {
+    name: 'graphql',
+    transform: function transform(source, id) {
+      if (!filter(id)) { return null; }
+      if (!filterExt.test(id)) { return null; }
+
+      // XXX: this.cachable() in graphql-tag/loader
+      var code = toESModules(loader.call({
+        cacheable: function cacheable() { }
+      }, source));
+
+      return {
+        code: code
+      };
+    }
+  };
+}
+
+module.exports = graphql;
new file mode 100644
--- /dev/null
+++ b/node_modules/rollup-plugin-graphql/dist/rollup-plugin-graphql.es.js
@@ -0,0 +1,70 @@
+import { createFilter } from 'rollup-pluginutils';
+import loader from 'graphql-tag/loader';
+import { EOL } from 'os';
+
+function toESModules(source) {
+  if (typeof source !== "string") {
+    return source;
+  }
+
+  return replaceRequires(replaceModuleExports(source));
+}
+
+function replaceModuleExports(source) {
+  return source
+    .replace('module.exports = doc', 'export default doc')
+    .replace(/module\.exports\["(.*)"] = oneQuery\(doc, "(.*)"\)/, function (match, g1, g2) { return ("export const " + g1 + " = oneQuery(doc, \"" + g2 + "\")"); });
+}
+
+function replaceRequires(source) {
+  var imports = {};
+  var index = 0;
+
+  // replace a require statement with a variable
+  source = source.replace(/require\(([^)]+)\)/ig, function (match, path) {
+    path = path.replace(/["']+/g, '');
+
+    if (!imports[path]) {
+      imports[path] = "frgmt" + (++index);
+    }
+
+    return imports[path];
+  });
+
+  // prepare import statements
+  var importsOutput = Object.keys(imports)
+    .map(function (path) { return ("import " + (imports[path]) + " from \"" + path + "\";"); })
+    .join(EOL);
+
+  return importsOutput + EOL + source;
+}
+
+function graphql(ref) {
+  if ( ref === void 0 ) ref = {};
+  var include = ref.include;
+  var exclude = ref.exclude;
+
+  // path filter
+  var filter = createFilter(include, exclude);
+  // only .graphql and .gql files
+  var filterExt = /\.(graphql|gql)$/i;
+
+  return {
+    name: 'graphql',
+    transform: function transform(source, id) {
+      if (!filter(id)) { return null; }
+      if (!filterExt.test(id)) { return null; }
+
+      // XXX: this.cachable() in graphql-tag/loader
+      var code = toESModules(loader.call({
+        cacheable: function cacheable() { }
+      }, source));
+
+      return {
+        code: code
+      };
+    }
+  };
+}
+
+export default graphql;
new file mode 100644
--- /dev/null
+++ b/node_modules/rollup-plugin-graphql/rollup.config.js
@@ -0,0 +1,16 @@
+import buble from 'rollup-plugin-buble';
+
+const pkg = require('./package.json');
+
+const external = Object.keys(pkg.dependencies);
+
+export default {
+	input: 'src/index.js',
+	output: [
+		{ file: pkg.main, format: 'cjs' },
+		{ file: pkg.module, format: 'es' }
+	],
+	plugins: [ buble() ],
+	external,
+	sourceMap: true
+};
